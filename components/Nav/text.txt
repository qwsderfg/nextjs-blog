<div className={Style.NavBar}>
      <div className={Style.nav_container}>
        <div className={Style.nav_container_left}>
          <div className={Style.logo}>
          <Image source={images.logo} alt='YugiMart' width={100} height={100}/>
          </div>
          <div className={Style.nav_container_left_box_input}>
            <div className={Style.nav_container_left_box_input_box}>
              <input type='text' placeholder="Search"/>
               <FaSearch onClick={()=> {}} className={Style.search_icon}/>
            </div>
          </div>
        </div>
      
        <div className={Style.nav_container_right}></div>
          <div className={Style.collections}>
            
              <p className={Style.collectionsp} onClick={() => {}}>
              <Link href='/collections'>Collections</Link>
              </p>
            
          </div>
          
          <div className={Style.nav_container_right_activity}>
            
          </div>
          <div className={Style.nav_container_right_notify}>
            <MdNotifications className={Style.notify} onClick={() => openNotification()}/>
            {notifications && (
            <Notification />
            )}
          </div>
          
        <div className={Style.nav_container_right_profile_box}>
          <div className={Style.nav_container_right_profile}>
           <Image src={images.user1} alt="Profile" width={40} height={40} onClick={() => openProfile()}
            className={Style.nav_container_right_profile}/>
            {profile && <Profile/>}
          </div>
        </div>
          <div className={Style.navcrmenubtn}>
            <TiThMenuOutline className={Style.menuicon}
            onClick={()=> openSideBar}></TiThMenuOutline>
          </div>
        </div>
        {
        openSideMenu && (
          <div className={Style.sidebar}>
            <SideBar setOpenSideMenu={setOpenSideMenu}/>
          </div>
        )
        }
      <div/>
    </div>



:root{
  --icons-color: #3b455e;
  --icons-light-color: #4c577341;
  --icons-bg-color: #e2e6e9; 
  --shadow-dark-color: #d3dae7;
  --shadow-light-color: #fff;
  --main-bg-color: #ecf0f3;

  --box-shadow: 1rem 1rem 1rem var(var(--shadow-dark-color), -1rem -1rem -1rem var(var(--shadow-dark-color)));

  --box-shadow-2: 0rem 0rem 0rem var(var(--shadow-dark-color), -.3rem -.3rem -.1rem var(var(--shadow-dark-color)));
}

html,
body {
  padding: 0;
  margin: 0;
  font-family:
    Inter,
    -apple-system,
    BlinkMacSystemFont,
    Segoe UI,
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    Fira Sans,
    Droid Sans,
    Helvetica Neue,
    sans-serif;
}

a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
  -webkit-tap-highlight-color: none;
}
::selection{
  color: var(--shadow-dark-color);
  background: var(--icons-color);


}

::-webkit-scrollbar{
  width: 1rem;
  border: 1px solid var(--main-bg-color);
}

::-webkit-scrollbar-track{

  border-radius: 0;
  background-color: var(--main-bg-color);

}

::-webkit-scrollbar-thumb{

  border-radius: 2rem;
  background: var(--icons-color);
  width: .5rem;

}

img {
  max-width: 100%;
  height: auto;
}







import React, {useState, useEffect} from 'react';
import Image from 'next/image';
import { Link } from '@chakra-ui/next-js'
//Icons
import { MdNotifications } from 'react-icons/md';
import { FaSearch } from "react-icons/fa";
import { TiThMenuOutline } from "react-icons/ti";
//Internal
import Style from "./NavBar.module.css"
import {Notification, Profile, sidebar, Collections} from './index'
import {button} from '../cindex'
import images from '../../img'
import { useRouter } from 'next/router';


  //component states


  const NavBar = () => {

  const [notifications, setNotifications] = useState(false);
  const [profile, setProfile] = useState(false);
  const [openSideMenu, setOpenSideMenu] = useState(false);  


  const openNotification = ()=>{
    if(!notifications){

      setNotifications(true);
      setProfile(false);
    } else {
      setNotifications(false);

      setNotifications(false)

    }
  };

  const openSideBar = () => {
    if(!openSideMenu){
      setOpenSideMenu(true)
    } else {
      openSideMenu(false)
    }
  }

  const openProfile = ()=>{
    if(!Profile){
      setProfile(true);

    }  else {
      setProfile(false)
    }
  }



  return (
    <div class="">
      <div class="m-2 grid gap-0 grid-cols-12 mx-auto">
        <div class=" rounded-xl bg-slate-300 col-span-9 grid mx-auto">
          <div class="grid grid-cols-12 grid-child mx-auto" >
            <div className='grid col-span-3 bg-pink-500 lg:rounded items-center mx-auto' >
              <Image herf='/' src={images.logo} alt='YugiMart' height={60}/>
            </div>
            <div class='grid col-span-4 items-center mx-auto'>
              <div class="grid items-center mx-auto bg-blue-500 ">    
                  <input type='text' placeholder="Search" class="grid bg-blue-500"/>
                    <FaSearch onClick={()=> {}} className={Style.search_icon}/>
              </div>
            </div>
            <div class="">
              <div class="grid" >
                <Link class="row col-span-2 bg-yellow-500 " href="/collections">
                  <b class=" ">Collections</b>
                </Link>
                <Link class="grid col-span-2 bg-yellow-500" href="/leaderboard">
                  <b class="">Leaderboard</b>
                </Link>
                <Link class="grid col-span-2 bg-yellow-500" href="/activity">
                  <b class="">Activity</b>
                </Link>
              </div>
            </div>
          </div>
        </div>
        <div class="min-h-[70x] bg-green-400 rounded-xl col-span-3">
          <div className={Style.nav_container_right_notify}>
            <MdNotifications className={Style.notify} onClick={() => openNotification()}/>
            {notifications && (
            <Notification />
            )}
          </div>
        
          <div className={Style.nav_container_right_profile_box}>
            <div className={Style.nav_container_right_profile}>
              <Image src={images.user1} alt="Profile" width={40} height={40} onClick={() => openProfile()}
              className={Style.nav_container_right_profile}/>
              {profile && <Profile/>}
            </div>
          </div>
          <div className={Style.navcrmenubtn}>
            <TiThMenuOutline className={Style.menuicon}
            onClick={()=> openSideBar}></TiThMenuOutline>
          </div>
        </div>
          {
          openSideMenu && (
           <div className={Style.sidebar}>
              <SideBar setOpenSideMenu={setOpenSideMenu}/>
           </div>
          )
         }

      </div>
    </div>
  )
}
export default NavBar




.NavBar{
    width: 100%;
    padding-block: 1.5rem;
    position: relative;
    z-index: 111111111;
}
.NavBarCont{
    width: 80%;
    margin: 0 auto;
    display: grid;
    grid-template-columns: repeat( 2, 1fr);
    align-items: center;
    justify-content: space-between;
    gap: 1rem;

}

.nav_container_left{
    display: grid;
    grid-template-columns: 1fr 2fr;
    align-items: center;
}
.nav_container_left_box_input{
    width: 60%;
    border: 1px solid var(--icons-color);
    display: flex;
    align-items: center;
    padding: .5rem;
    border-radius: 2rem;

}
.navsearch{
width: 90%;
 border: none;
outline: none;
background-color: rgba(0,0,0,0);

}
.search_icon{
    cursor: pointer;
    font-size: 1.2rem;
}
.nav_container_right{
    display: grid;
    grid-template-columns: 1fr 1fr 0.5fr 1fr .3fr;
    gap: 1rem;
    align-items: center;
    align-self: flex-end;
}
.navtextboxbox{
    position: relative;
    cursor: pointer;
}
.navtext{
    padding: 1rem 0.5rem;
}


.avtextbox{
    tab-size: 4;
    font-variation-settings: normal;
    -webkit-tap-highlight-color: transparent;
    text-size-adjust: 100%;
    border-color: var(--chakra-colors-chakra-border-color);
    border-width: 0px;
    border-style: solid;
    box-sizing: border-box;
    overflow-wrap: break-word;
    -webkit-box-align: center;
    align-items: center;
    display: none; 
}
.nvtextboxbox{
    tab-size: 4;
    font-variation-settings: normal;
    -webkit-tap-highlight-color: transparent;
    text-size-adjust: 100%;
    margin: 0;
    border-color: var(--chakra-colors-chakra-border-color);
    border-width: 0px;
    border-style: solid;
    box-sizing: border-box;
    overflow-wrap: break-word;
    background-color: transparent;
    transition-property: var(--chakra-transition-property-common);
    transition-duration: var(--chakra-transition-duration-fast);
    transition-timing-function: var(--chakra-transition-easing-ease-out);
    cursor: pointer;
    text-decoration: none;
    outline: transparent solid 2px;
    outline-offset: 2px;
    color: inherit;
    padding-inline-start: var(--chakra-space-2);
    padding-inline-end: var(--chakra-space-2);
    padding-top: var(--chakra-space-1);
    padding-bottom: var(--chakra-space-1);
    margin-right: var(--chakra-space-3);
    border-radius: var(--chakra-radii-md);
    font-family: "DM Sans";
}
.navtext{}
 






import { useState } from 'react';
import { BiStats, BiHomeAlt2 } from "react-icons/bi";
import { GrConnect } from "react-icons/gr";
import { HiOutlineCollection } from "react-icons/hi";
import { FaSearch } from "react-icons/fa";

const MobileNav = () => {
  const [activeTab, setActiveTab] = useState('home');

  const style = {
    body: {
      display: 'flex',
      justifyContent: 'flex-end',
      alignItems: 'flex-end',
      position: 'fixed',
      bottom: '0',
      left: '0',
      width: '100%',
      backgroundColor: 'gray',
    },
    navigation: {
      width: '100%',
      height: '70px', // Increased height by 20px
      background: 'gray',
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      padding: '',
      boxSizing: 'border-box',
      position: 'relative',
    },
    ul: {
      display: 'flex',
      flex: '1',
      padding: '0',
      justifyContent: 'space-between',
      alignItems: 'center',
    },
    li: {
      listStyle: 'none',
      position: 'relative',
      zIndex: '2',
      width: '20%',
      textAlign: 'center',
    },
    a: {
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center',
      textDecoration: 'none',
      color: 'gray',
    },
    iconContainer: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center',
    },
    icon: {
      fontSize: '1.5em',
      transition: '0.5s',
      marginBottom: '-30px', // Adjust this value to control horizontal position
    },
    activeIcon: {
      transform: 'translateY(-15px)',
      color: 'orangered',
    },
    text: {
      background: 'orangered',
      color: '#fff',
      padding: '5px 10px',
      borderRadius: '12px',
      fontWeight: '400',
      fontSize: '0.75em',
      letterSpacing: '0.05em',
      transition: '0.5s',
      opacity: '0',
      transform: 'translateY(15px)',
      whiteSpace: 'nowrap',
    },
    activeText: {
      transform: 'translateY(10px)',
      opacity: '1',
    },
    indicator: {
      position: 'absolute',
      bottom: '0',
      left: '0',
      width: '20%',
      height: '100%',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      boxSizing: 'border-box',
    },
    indicatorBefore: {
      content: '',
      top: '-20px',
      position: 'absolute',
      width: '50px',
      height: '50px',
      background: 'gray',
      borderRadius: '50%',
      transition: '0.5s',
    },
    // Define different positions for the indicator based on active tab
    homeIndicator: {
      left: '0',
    },
    collectionsIndicator: {
      left: '20%',
    },
    searchIndicator: {
      left: '40%',
    },
    statsIndicator: {
      left: '60%',
    },
    connectIndicator: {
      left: '80%',
    },
  };

  const handleTabClick = (tab) => {
    setActiveTab(tab);
  };

  return (
    <div style={style.body}>
      <div style={style.navigation}>
        <ul style={style.ul}>
          <li style={style.li} className={activeTab === 'home' ? 'active' : ''}>
            <a href="#" onClick={() => handleTabClick('home')}>
              <span style={style.iconContainer}>
                <BiHomeAlt2 style={style.icon} />
              </span>
              <span style={{ ...style.text, ...(activeTab === 'home' ? style.activeText : {}) }}>Home</span>
            </a>
          </li>
          <li style={style.li} className={activeTab === 'collections' ? 'active' : ''}>
            <a href="#" onClick={() => handleTabClick('collections')}>
              <span style={style.iconContainer}>
                <HiOutlineCollection style={style.icon} />
              </span>
              <span style={{ ...style.text, ...(activeTab === 'collections' ? style.activeText : {}) }}>Collections</span>
            </a>
          </li>
          <li style={style.li} className={activeTab === 'search' ? 'active' : ''}>
            <a href="#" onClick={() => handleTabClick('search')}>
              <span style={style.iconContainer}>
                <FaSearch style={style.icon} />
              </span>
              <span style={{ ...style.text, ...(activeTab === 'search' ? style.activeText : {}) }}>Search</span>
            </a>
          </li>
          <li style={style.li} className={activeTab === 'stats' ? 'active' : ''}>
            <a href="#" onClick={() => handleTabClick('stats')}>
              <span style={style.iconContainer}>
                <BiStats style={style.icon} />
              </span>
              <span style={{ ...style.text, ...(activeTab === 'stats' ? style.activeText : {}) }}>Stats</span>
            </a>
          </li>
          <li style={style.li} className={activeTab === 'connect' ? 'active' : ''}>
            <a href="#" onClick={() => handleTabClick('connect')}>
              <span style={style.iconContainer}>
                <GrConnect style={style.icon} />
              </span>
              <span style={{ ...style.text, ...(activeTab === 'connect' ? style.activeText : {}) }}>Connect</span>
            </a>
          </li>
        </ul>
        {/* Apply style for indicator based on active tab */}
        <div style={{ ...style.indicator, ...(style[activeTab + 'Indicator'] || {}) }}>
          <div style={style.indicatorBefore}></div>
        </div>
      </div>
    </div>
  );
};

export default MobileNav;
